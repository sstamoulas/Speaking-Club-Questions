{"version":3,"sources":["redux/question/question.types.js","redux/question/question.reducer.js","redux/feedback/feedback.types.js","redux/feedback/feedback.reducer.js","redux/color/color.types.js","redux/color/color.utils.js","redux/color/color.reducer.js","redux/root-reducer.js","redux/question/question.actions.js","firebase/firebase.utils.js","redux/question/question.sagas.js","redux/feedback/feedback.actions.js","redux/feedback/feedback.sagas.js","redux/root-saga.js","redux/store.js","redux/color/color.actions.js","pages/landing-page/landing-page.component.jsx","constants/routes.js","components/question/question.component.jsx","pages/questions-page/questions-page.component.jsx","pages/feedback-page/feedback-page.component.jsx","pages/not-found-page/not-found-page.component.jsx","App.js","index.js"],"names":["QuestionActionTypes","SUBMIT_QUESTIONS_START","SUBMIT_QUESTIONS_SUCCESS","SUBMIT_QUESTIONS_FAILURE","FETCH_QUESTIONS_START","FETCH_QUESTIONS_SUCCESS","FETCH_QUESTIONS_FAILURE","INITIAL_STATE","questionReducer","state","action","type","questions","payload","error","FeedbackActionTypes","SUBMIT_FEEDBACK_START","SUBMIT_FEEDBACK_SUCCESS","SUBMIT_FEEDBACK_FAILURE","feedbackReducer","ColorActionTypes","GENERATE_RANDOM_COLOR","generateRandomColor","randomColor","length","parseInt","Math","random","generateRandomNumber","toString","i","colorReducer","currentColor","rootReducer","combineReducers","question","feedback","color","fetchQuestionsSuccess","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","submitNewQuestions","a","docRef","collection","doc","update","FieldValue","arrayUnion","console","log","message","submitNewFeedback","getAllQuestions","get","snapShot","data","submitQuestionsAsync","fetchQuestionsAsync","onSubmitQuestionsStart","onFetchQuestionsStart","questionSagas","call","put","takeLatest","all","submitFeedbackAsync","onSubmitFeedbackStart","feedbackSagas","rootSaga","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","applyMiddleware","run","connect","dispatch","submitQuestionsStart","withRouter","history","useState","setQuestions","handleChange","event","target","name","value","newArray","className","onSubmit","push","preventDefault","map","index","key","onChange","Question","style","fetchQuestionsStart","floor","questionNumber","setQuestionNumber","useEffect","onClick","questionElement","document","getElementsByClassName","buttonElement","ripple","createElement","classList","add","appendChild","x","clientX","offsetLeft","y","clientY","offsetTop","left","top","setTimeout","remove","submitFeedbackStart","setFeedback","rows","NotFoundPage","getElementsByTagName","backgroundColor","exact","path","component","LandingPage","QuestionsPage","FeedbackPage","to","ReactDOM","render","basename","getElementById"],"mappings":"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","file":"static/js/main.3c41e0f3.chunk.js","sourcesContent":["const QuestionActionTypes = {\n  SUBMIT_QUESTIONS_START: 'SUBMIT_QUESTIONS_START',\n  SUBMIT_QUESTIONS_SUCCESS: 'SUBMIT_QUESTIONS_SUCCESS',\n  SUBMIT_QUESTIONS_FAILURE: 'SUBMIT_QUESTIONS_FAILURE',\n  FETCH_QUESTIONS_START: 'FETCH_QUESTIONS_START',\n  FETCH_QUESTIONS_SUCCESS: 'FETCH_QUESTIONS_SUCCESS',\n  FETCH_QUESTIONS_FAILURE: 'FETCH_QUESTIONS_FAILURE',\n}\n\nexport default QuestionActionTypes;\n","import QuestionActionTypes from './question.types';\n\nconst INITIAL_STATE = {\n  'questions': [],\n  'error': '',\n};\n\nconst questionReducer = (state = INITIAL_STATE, action) => {\n  switch(action.type) {\n    case QuestionActionTypes.FETCH_QUESTIONS_SUCCESS:\n      return {\n        ...state,\n        questions: action.payload,\n        error: null,\n      };\n    case QuestionActionTypes.FETCH_QUESTIONS_START:\n    case QuestionActionTypes.SUBMIT_QUESTIONS_SUCCESS:\n      return {\n        ...state,\n        error: null,\n      };\n    case QuestionActionTypes.FETCH_QUESTIONS_FAILURE:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default questionReducer;\n","const FeedbackActionTypes = {\n  SUBMIT_FEEDBACK_START: 'SUBMIT_FEEDBACK_START',\n  SUBMIT_FEEDBACK_SUCCESS: 'SUBMIT_FEEDBACK_SUCCESS',\n  SUBMIT_FEEDBACK_FAILURE: 'SUBMIT_FEEDBACK_FAILURE',\n}\n\nexport default FeedbackActionTypes;\n","import FeedbackActionTypes from './feedback.types';\n\nconst INITIAL_STATE = {\n  'error': '',\n};\n\nconst feedbackReducer = (state = INITIAL_STATE, action) => {\n  switch(action.type) {\n    case FeedbackActionTypes.SUBMIT_FEEDBACK_START:\n    case FeedbackActionTypes.SUBMIT_FEEDBACK_SUCCESS:\n      return {\n        ...state,\n        error: null,\n      };\n    case FeedbackActionTypes.SUBMIT_FEEDBACK_FAILURE:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default feedbackReducer;\n","const ColorActionTypes = {\n  GENERATE_RANDOM_COLOR: 'GENERATE_RANDOM_COLOR',\n}\n\nexport default ColorActionTypes;\n","export const generateRandomNumber = (length) => {\n  return parseInt(Math.random() * (length));\n}\n\nexport const generateRandomColor = () => {\n    var randomColor = generateRandomNumber(0xFFFFFF<<0).toString(16);\n    var length = randomColor.length;\n    for(var i = 0; i < length; i++) {\n      if(length < 6) {\n        randomColor = 0 + randomColor;\n        length++;\n      }\n    }\n\n    return ('#' + randomColor);\n}\n","import ColorActionTypes from './color.types';\nimport { generateRandomColor } from './color.utils';\n\nconst INITIAL_STATE = {\n  'currentColor': '#000',\n};\n\nconst colorReducer = (state = INITIAL_STATE, action) => {\n  switch(action.type) {\n    case ColorActionTypes.GENERATE_RANDOM_COLOR:\n      return {\n        ...state,\n        currentColor: generateRandomColor(),\n      };\n    default:\n      return state;\n  }\n}\n\nexport default colorReducer;\n","import { combineReducers } from 'redux';\n\nimport questionReducer from './question/question.reducer';\nimport feedbackReducer from './feedback/feedback.reducer';\nimport colorReducer from './color/color.reducer';\n\nconst rootReducer = combineReducers({\n  question: questionReducer,\n  feedback: feedbackReducer,\n  color: colorReducer,\n});\n\nexport default rootReducer;\n","import QuestionActionTypes from './question.types';\n\nexport const submitQuestionsStart = (questions) => ({\n  type: QuestionActionTypes.SUBMIT_QUESTIONS_START,\n  payload: { questions },\n});\n\nexport const submitQuestionsSuccess = () => ({\n  type: QuestionActionTypes.SUBMIT_QUESTIONS_SUCCESS,\n});\n\nexport const submitQuestionsFailure = (error) => ({\n  type: QuestionActionTypes.SUBMIT_QUESTIONS_FAILURE,\n  payload: error,\n});\n\nexport const fetchQuestionsStart = () => ({\n  type: QuestionActionTypes.FETCH_QUESTIONS_START,\n});\n\nexport const fetchQuestionsSuccess = (questions) => ({\n  type: QuestionActionTypes.FETCH_QUESTIONS_SUCCESS,\n  payload: questions,\n});\n\nexport const fetchQuestionsFailure = (error) => ({\n  type: QuestionActionTypes.FETCH_QUESTIONS_FAILURE,\n  payload: error,\n});\n","import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\n};\n\nfirebase.initializeApp(config);\n\nexport const firestore = firebase.firestore();\n\nexport const submitNewQuestions = async (questions) => {\n  const docRef = firestore.collection('speaking-club').doc('questions');\n\n  try {\n    await docRef.update({\n      questions: firebase.firestore.FieldValue.arrayUnion(...questions),\n    });\n  } catch(error) {\n    console.log('error submiting new questions', error.message);\n  }\n\n  return docRef;\n}\n\nexport const submitNewFeedback = async (feedback) => {\n  const docRef = firestore.collection('speaking-club').doc('feedback');\n\n  try {\n    await docRef.update({\n      feedback: firebase.firestore.FieldValue.arrayUnion(feedback),\n    });\n  } catch(error) {\n    console.log('error submiting new feedback', error.message);\n  }\n\n  return docRef;\n}\n\nexport const addNewTopic = async (topic) => {\n  const docRef = firestore.collection('speaking-club').doc('questions');\n  const snapShot = await docRef.get();\n\n  if(!snapShot.exists) {\n    const createdAt = new Date();\n\n    try {\n      await docRef.set({\n        topic,\n        createdAt\n      });\n    } catch(error) {\n      console.log('error adding new topic', error.message);\n    }\n  }\n\n  return docRef;\n}\n\nexport const getAllTopics = async () => {\n  const docRef = firestore.collection('speaking-club').doc('questions');\n  return docRef.data();\n}\n\nexport const getAllQuestions = async () => {\n  const docRef = firestore.collection('speaking-club').doc('questions');\n  const snapShot = await docRef.get();\n  const { questions } = snapShot.data();\n\n  return questions;\n}\n\nexport default firebase;\n","import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport QuestionActionTypes from './question.types';\n\nimport { \n  submitQuestionsSuccess, \n  submitQuestionsFailure,\n  fetchQuestionsSuccess,\n  fetchQuestionsFailure,\n} from './../question/question.actions';\n\nimport { getAllQuestions, submitNewQuestions } from '../../firebase/firebase.utils';\n\nexport function* submitQuestionsAsync({ payload: { questions }}) {\n  try {\n    yield call(submitNewQuestions, questions);\n    yield put(submitQuestionsSuccess());\n  } catch(error) {\n    yield put(submitQuestionsFailure(error));\n  }\n}\n\nexport function* fetchQuestionsAsync() {\n  try {\n    const questions = yield call(getAllQuestions);\n    yield put(fetchQuestionsSuccess(questions));\n  } catch(error) {\n    yield put(fetchQuestionsFailure(error));\n  }\n}\n\nexport function* onSubmitQuestionsStart() {\n  yield takeLatest(\n    QuestionActionTypes.SUBMIT_QUESTIONS_START, \n    submitQuestionsAsync\n  );\n}\n\nexport function* onFetchQuestionsStart() {\n  yield takeLatest(\n    QuestionActionTypes.FETCH_QUESTIONS_START, \n    fetchQuestionsAsync\n  );\n}\n\nexport function* questionSagas() {\n  yield all([\n    call(onSubmitQuestionsStart),\n    call(onFetchQuestionsStart),\n  ]);\n}\n","import FeedbackActionTypes from './feedback.types';\n\nexport const submitFeedbackStart = (feedback) => ({\n  type: FeedbackActionTypes.SUBMIT_FEEDBACK_START,\n  payload: { feedback },\n});\n\nexport const submitFeedbackSuccess = () => ({\n  type: FeedbackActionTypes.SUBMIT_FEEDBACK_SUCCESS,\n});\n\nexport const submitFeedbackFailure = (error) => ({\n  type: FeedbackActionTypes.SUBMIT_FEEDBACK_FAILURE,\n  payload: error,\n});\n","import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport FeedbackActionTypes from './feedback.types';\n\nimport { submitFeedbackSuccess, submitFeedbackFailure } from './../feedback/feedback.actions';\n\nimport { submitNewFeedback } from './../../firebase/firebase.utils';\n\nexport function* submitFeedbackAsync({ payload: { feedback }}) {\n  try {\n    yield call(submitNewFeedback, feedback);\n    yield put(submitFeedbackSuccess());\n  } catch(error) {\n    yield put(submitFeedbackFailure(error));\n  }\n}\n\nexport function* onSubmitFeedbackStart() {\n  yield takeLatest(\n    FeedbackActionTypes.SUBMIT_FEEDBACK_START, \n    submitFeedbackAsync\n  );\n}\n\nexport function* feedbackSagas() {\n  yield all([\n    call(onSubmitFeedbackStart),\n  ]);\n}\n","import { all, call } from 'redux-saga/effects';\n\nimport { questionSagas } from './question/question.sagas';\nimport { feedbackSagas } from './feedback/feedback.sagas';\n\nexport default function* rootSaga() {\n  yield all([\n    call(questionSagas),\n    call(feedbackSagas),\n  ]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './root-reducer';\nimport rootSaga from './root-saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import ColorActionTypes from './color.types';\n\nexport const generateRandomColor = () => ({\n  type: ColorActionTypes.GENERATE_RANDOM_COLOR,\n});\n","import React, { Fragment, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { submitQuestionsStart } from './../../redux/question/question.actions';\nimport { generateRandomColor } from './../../redux/color/color.actions';\nimport * as ROUTES from './../../constants/routes';\n\nimport './landing-page.styles.scss';\n\nconst LandingPage = ({ history, submitQuestionsStart, generateRandomColor }) => {\n  let [questions, setQuestions] = useState(['', '', '', '', '']);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    let newArray = [...questions];\n    newArray[name] = value;\n    setQuestions(newArray);\n  }\n\n  const handleSubmit = (event) => {\n    submitQuestionsStart(questions);\n    generateRandomColor();\n    history.push(ROUTES.QUESTIONS);\n    event.preventDefault();\n  }\n\n  return (\n    <Fragment>\n      <h2 className='page-title'>Please Submit 5 Questions</h2>\n      <form onSubmit={handleSubmit}>\n        {\n          questions.map((question, index) => <input type='text' name={index} key={`question-${index}`} value={question} onChange={handleChange} />)\n        }\n        <input type=\"submit\" value=\"Submit Questions\" />\n      </form>\n    </Fragment>\n  )\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  submitQuestionsStart: (questions) => dispatch(submitQuestionsStart(questions)),\n  generateRandomColor: () => dispatch(generateRandomColor()),\n})\n\nexport default connect(null, mapDispatchToProps)(withRouter(LandingPage));\n","export const LANDING = '/';\nexport const QUESTIONS = '/questions';\nexport const FEEDBACK = '/feedback';\nexport const NOT_FOUND= '/*';\n","import React from 'react';\n\nimport './question.styles.scss';\n\nconst Question = ({ color, question }) => (\n  <p className='question' style={{ 'color': color }}>{question}</p>\n);\n\nexport default Question;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport { fetchQuestionsStart } from './../../redux/question/question.actions';\nimport { generateRandomColor } from './../../redux/color/color.actions';\n\nimport Question from './../../components/question/question.component';\n\nimport './questions-page.styles.scss';\n\nconst QuestionsPage = ({ color, questions, fetchQuestionsStart, generateRandomColor }) => {\n  const [questionNumber, setQuestionNumber] = useState(Math.floor(Math.random() * questions.length));\n\n  useEffect(() => {\n    fetchQuestionsStart();\n  }, [fetchQuestionsStart]);\n\n  const handleClick = (event) => {\n    const questionElement = document.getElementsByClassName('question')[0];\n    const buttonElement = document.getElementsByClassName('btn')[0];\n    questionElement.style.color = 'white';\n\n    // Create span element \n    let ripple = document.createElement(\"span\"); \n\n    // Add ripple class to span \n    ripple.classList.add(\"ripple\"); \n\n    // Add span to the button  \n    buttonElement.appendChild(ripple); \n\n    // Get position of X \n    let x = event.clientX - event.target.offsetLeft; \n\n    // Get position of Y  \n    let y = event.clientY - event.target.offsetTop; \n\n    // Position the span element \n    ripple.style.left = `${x}px`; \n    ripple.style.top = `${y}px`; \n\n    // Remove span after 0.3s \n    setTimeout(() => { \n        ripple.remove(); \n    }, 500); \n\n    setTimeout(() => {\n      setQuestionNumber(Math.floor(Math.random() * questions.length));\n      generateRandomColor();\n    }, 500);\n\n    event.preventDefault();\n  }\n\n  return (\n    <Fragment>\n      <Question question={questions[questionNumber]} color={color} />\n      <button className='btn' style={{ 'backgroundColor': color }} onClick={handleClick}>New Question</button>\n    </Fragment>\n  )\n};\n\nconst mapStateToProps = (state) => ({\n  questions: state.question.questions,\n  color: state.color.currentColor,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchQuestionsStart: () => dispatch(fetchQuestionsStart()),\n  generateRandomColor: () => dispatch(generateRandomColor()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsPage);\n","import React, { Fragment, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { submitFeedbackStart } from './../../redux/feedback/feedback.actions';\nimport * as ROUTES from './../../constants/routes';\n\nimport './feedback-page.styles.scss';\n\nconst FeedbackPage = ({ history, submitFeedbackStart }) => {\n  let [feedback, setFeedback] = useState('');\n\n  const handleChange = (event) => {\n    const { value } = event.target;\n    setFeedback(value);\n  }\n\n  const handleSubmit = (event) => {\n    submitFeedbackStart(feedback);\n    history.push(ROUTES.QUESTIONS);\n    event.preventDefault();\n  }\n\n  return (\n    <Fragment>\n      <h2 className='page-title'>Please Provide Feedback</h2>\n      <form onSubmit={handleSubmit}>\n        <textarea rows=\"10\" value={feedback} onChange={handleChange}></textarea>\n        <input type=\"submit\" value=\"Submit Feedback\" />\n      </form>\n    </Fragment>\n  )\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  submitFeedbackStart: (feedback) => dispatch(submitFeedbackStart(feedback)),\n})\n\nexport default connect(null, mapDispatchToProps)(withRouter(FeedbackPage));\n","import React from 'react';\n \nconst NotFoundPage = () => (\n  <div>\n    <h1>Not Found Page</h1>\n    <p>Sorry the url you entered was not found.</p>\n  </div>\n);\n \nexport default NotFoundPage;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Switch, Route, Link } from 'react-router-dom';\n\nimport LandingPage from './pages/landing-page/landing-page.component';\nimport QuestionsPage from './pages/questions-page/questions-page.component';\nimport FeedbackPage from './pages/feedback-page/feedback-page.component';\nimport NotFoundPage from './pages/not-found-page/not-found-page.component';\n\nimport * as ROUTES from './constants/routes';\n\nimport './App.scss';\n\nconst App = ({ color }) => {\n  const bodyElement = document.getElementsByTagName('body')[0];\n\n  bodyElement.style.backgroundColor = color;\n\n  return (\n    <div className='container'>\n      <div className='sub-container'>\n        <Switch>\n          <Route exact path={ROUTES.LANDING} component={LandingPage} />\n          <Route exact path={ROUTES.QUESTIONS} component={QuestionsPage} />\n          <Route exact path={ROUTES.FEEDBACK} component={FeedbackPage} />\n          <Route path={ROUTES.NOT_FOUND} component={NotFoundPage} />\n        </Switch>\n      </div>\n      <Link to={ROUTES.FEEDBACK} className='feeback-link'>Click to Provide Feedback</Link>\n    </div>\n  )\n};\n\nconst mapStateToProps = (state) => ({\n  color: state.color.currentColor,\n});\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { store } from './redux/store';\n\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter basename={`${process.env.PUBLIC_URL}`}>\n      <App />\n    </BrowserRouter>\n  </Provider>, \n  document.getElementById('root')\n);\n"],"sourceRoot":""}